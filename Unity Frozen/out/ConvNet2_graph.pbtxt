node {
  name: "ConvNet2/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "ConvNet2_1/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
        dim {
          size: 15
        }
      }
    }
  }
}
node {
  name: "ConvNet2_1/Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
        dim {
          size: 15
        }
      }
    }
  }
}
node {
  name: "ConvNet2_1/Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "ConvNet2_1/Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "ConvNet2_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\005\000\000\000<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Reshape"
  op: "Reshape"
  input: "ConvNet2/Placeholder"
  input: "ConvNet2_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14213381707668304
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14213381707668304
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/max"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/mul"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/Assign"
  op: "Assign"
  input: "ConvNet2/Conv1/kernel"
  input: "ConvNet2/Conv1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Conv1/kernel/read"
  op: "Identity"
  input: "ConvNet2/Conv1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/Conv1/bias/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/Conv1/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias/Assign"
  op: "Assign"
  input: "ConvNet2/Conv1/bias"
  input: "ConvNet2/Conv1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Conv1/bias/read"
  op: "Identity"
  input: "ConvNet2/Conv1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/Conv2D"
  op: "Conv2D"
  input: "ConvNet2_2/Reshape"
  input: "ConvNet2/Conv1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/BiasAdd"
  op: "BiasAdd"
  input: "ConvNet2_2/Conv1/Conv2D"
  input: "ConvNet2/Conv1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/LeakyRelu/mul"
  op: "Mul"
  input: "ConvNet2_2/Conv1/LeakyRelu/alpha"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_2/Conv1/LeakyRelu/Maximum"
  op: "Maximum"
  input: "ConvNet2_2/Conv1/LeakyRelu/mul"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/max"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/mul"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/Assign"
  op: "Assign"
  input: "ConvNet2/Conv2/kernel"
  input: "ConvNet2/Conv2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Conv2/kernel/read"
  op: "Identity"
  input: "ConvNet2/Conv2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/Conv2/bias/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/Conv2/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias/Assign"
  op: "Assign"
  input: "ConvNet2/Conv2/bias"
  input: "ConvNet2/Conv2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Conv2/bias/read"
  op: "Identity"
  input: "ConvNet2/Conv2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/Conv2D"
  op: "Conv2D"
  input: "ConvNet2_2/Conv1/LeakyRelu/Maximum"
  input: "ConvNet2/Conv2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/BiasAdd"
  op: "BiasAdd"
  input: "ConvNet2_2/Conv2/Conv2D"
  input: "ConvNet2/Conv2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/LeakyRelu/mul"
  op: "Mul"
  input: "ConvNet2_2/Conv2/LeakyRelu/alpha"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_2/Conv2/LeakyRelu/Maximum"
  op: "Maximum"
  input: "ConvNet2_2/Conv2/LeakyRelu/mul"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_2/flatten/Shape"
  op: "Shape"
  input: "ConvNet2_2/Conv2/LeakyRelu/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_2/flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_2/flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_2/flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_2/flatten/strided_slice"
  op: "StridedSlice"
  input: "ConvNet2_2/flatten/Shape"
  input: "ConvNet2_2/flatten/strided_slice/stack"
  input: "ConvNet2_2/flatten/strided_slice/stack_1"
  input: "ConvNet2_2/flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ConvNet2_2/flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_2/flatten/Reshape/shape"
  op: "Pack"
  input: "ConvNet2_2/flatten/strided_slice"
  input: "ConvNet2_2/flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2_2/flatten/Reshape"
  op: "Reshape"
  input: "ConvNet2_2/Conv2/LeakyRelu/Maximum"
  input: "ConvNet2_2/flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\016\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04035671427845955
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04035671427845955
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/max"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/mul"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3584
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/Assign"
  op: "Assign"
  input: "ConvNet2/Dense1/kernel"
  input: "ConvNet2/Dense1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Dense1/kernel/read"
  op: "Identity"
  input: "ConvNet2/Dense1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/Dense1/bias/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/Dense1/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias/Assign"
  op: "Assign"
  input: "ConvNet2/Dense1/bias"
  input: "ConvNet2/Dense1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/Dense1/bias/read"
  op: "Identity"
  input: "ConvNet2/Dense1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_2/Dense1/MatMul"
  op: "MatMul"
  input: "ConvNet2_2/flatten/Reshape"
  input: "ConvNet2/Dense1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_2/Dense1/BiasAdd"
  op: "BiasAdd"
  input: "ConvNet2_2/Dense1/MatMul"
  input: "ConvNet2/Dense1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_2/Dense1/Sigmoid"
  op: "Sigmoid"
  input: "ConvNet2_2/Dense1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.24373334646224976
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.24373334646224976
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/max"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/mul"
  input: "ConvNet2/output/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/output/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/output/kernel/Assign"
  op: "Assign"
  input: "ConvNet2/output/kernel"
  input: "ConvNet2/output/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/output/kernel/read"
  op: "Identity"
  input: "ConvNet2/output/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/output/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2/output/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/output/bias/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/output/bias/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/output/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/output/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/output/bias/Assign"
  op: "Assign"
  input: "ConvNet2/output/bias"
  input: "ConvNet2/output/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/output/bias/read"
  op: "Identity"
  input: "ConvNet2/output/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_2/output/MatMul"
  op: "MatMul"
  input: "ConvNet2_2/Dense1/Sigmoid"
  input: "ConvNet2/output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_2/output/BiasAdd"
  op: "BiasAdd"
  input: "ConvNet2_2/output/MatMul"
  input: "ConvNet2/output/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_2/output/Sigmoid"
  op: "Sigmoid"
  input: "ConvNet2_2/output/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/Squeeze"
  op: "Squeeze"
  input: "ConvNet2_2/output/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/add"
  op: "Add"
  input: "ConvNet2_1/Placeholder_2"
  input: "ConvNet2_3/log_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Log"
  op: "Log"
  input: "ConvNet2_3/log_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Mul"
  op: "Mul"
  input: "ConvNet2_3/Squeeze"
  input: "ConvNet2_3/log_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Neg"
  op: "Neg"
  input: "ConvNet2_3/log_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/sub"
  op: "Sub"
  input: "ConvNet2_3/log_loss/sub/x"
  input: "ConvNet2_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/sub_1"
  op: "Sub"
  input: "ConvNet2_3/log_loss/sub_1/x"
  input: "ConvNet2_1/Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/add_1"
  op: "Add"
  input: "ConvNet2_3/log_loss/sub_1"
  input: "ConvNet2_3/log_loss/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Log_1"
  op: "Log"
  input: "ConvNet2_3/log_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Mul_1"
  op: "Mul"
  input: "ConvNet2_3/log_loss/sub"
  input: "ConvNet2_3/log_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/sub_2"
  op: "Sub"
  input: "ConvNet2_3/log_loss/Neg"
  input: "ConvNet2_3/log_loss/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/values/rank"
  op: "Rank"
  input: "ConvNet2_3/log_loss/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar/x"
  input: "ConvNet2_3/log_loss/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/values/rank"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/values/rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/weights/rank"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/weights/rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/values/shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/sub_2:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_t"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/sub_2:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/values/shape"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/is_scalar"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/ToFloat_3/x"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Mul_2"
  op: "Mul"
  input: "ConvNet2_3/log_loss/sub_2"
  input: "ConvNet2_3/log_loss/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Rank"
  op: "Rank"
  input: "ConvNet2_3/log_loss/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/range/start"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/range/delta"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/range"
  op: "Range"
  input: "ConvNet2_3/log_loss/range/start"
  input: "ConvNet2_3/log_loss/Rank"
  input: "ConvNet2_3/log_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Sum"
  op: "Sum"
  input: "ConvNet2_3/log_loss/Mul_2"
  input: "ConvNet2_3/log_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/Equal/y"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/Equal"
  op: "Equal"
  input: "ConvNet2_3/log_loss/ToFloat_3/x"
  input: "ConvNet2_3/log_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/zeros_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/zeros_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/num_present/zeros_like/shape_as_tensor"
  input: "ConvNet2_3/log_loss/num_present/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/ones_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/num_present/ones_like/Shape"
  input: "ConvNet2_3/log_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/Select"
  op: "Select"
  input: "ConvNet2_3/log_loss/num_present/Equal"
  input: "ConvNet2_3/log_loss/num_present/zeros_like"
  input: "ConvNet2_3/log_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/sub_2"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Rank"
  input: "ConvNet2_3/log_loss/sub_2"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/num_present/Select:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/sub_2:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/num_present/Select:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ConvNet2_3/log_loss/sub_2:0"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/sub_2"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^ConvNet2_3/log_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "ConvNet2_3/log_loss/num_present/Select"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/Rank"
  op: "Rank"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/range/start"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/range/delta"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present/range"
  op: "Range"
  input: "ConvNet2_3/log_loss/num_present/range/start"
  input: "ConvNet2_3/log_loss/num_present/Rank"
  input: "ConvNet2_3/log_loss/num_present/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/num_present"
  op: "Sum"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights"
  input: "ConvNet2_3/log_loss/num_present/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/log_loss/Sum"
  input: "ConvNet2_3/log_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Greater/y"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Greater"
  op: "Greater"
  input: "ConvNet2_3/log_loss/num_present"
  input: "ConvNet2_3/log_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Equal/y"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Equal"
  op: "Equal"
  input: "ConvNet2_3/log_loss/num_present"
  input: "ConvNet2_3/log_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/ones_like/Shape"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/ones_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/ones_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/ones_like/Shape"
  input: "ConvNet2_3/log_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/Select"
  op: "Select"
  input: "ConvNet2_3/log_loss/Equal"
  input: "ConvNet2_3/log_loss/ones_like"
  input: "ConvNet2_3/log_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/div"
  op: "RealDiv"
  input: "ConvNet2_3/log_loss/Sum_1"
  input: "ConvNet2_3/log_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/zeros_like/Const"
  op: "Const"
  input: "^ConvNet2_3/log_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/zeros_like"
  op: "Fill"
  input: "ConvNet2_3/log_loss/zeros_like/shape_as_tensor"
  input: "ConvNet2_3/log_loss/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/log_loss/value"
  op: "Select"
  input: "ConvNet2_3/log_loss/Greater"
  input: "ConvNet2_3/log_loss/div"
  input: "ConvNet2_3/log_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/Fill"
  op: "Fill"
  input: "ConvNet2_3/gradients/Shape"
  input: "ConvNet2_3/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like/shape_as_tensor"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select"
  op: "Select"
  input: "ConvNet2_3/log_loss/Greater"
  input: "ConvNet2_3/gradients/Fill"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select_1"
  op: "Select"
  input: "ConvNet2_3/log_loss/Greater"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/zeros_like"
  input: "ConvNet2_3/gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/Select_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/control_dependency"
  input: "ConvNet2_3/log_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Neg"
  op: "Neg"
  input: "ConvNet2_3/log_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Neg"
  input: "ConvNet2_3/log_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv_1"
  input: "ConvNet2_3/log_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/value_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like/shape_as_tensor"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select"
  op: "Select"
  input: "ConvNet2_3/log_loss/Equal"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select_1"
  op: "Select"
  input: "ConvNet2_3/log_loss/Equal"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/zeros_like"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/div_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Size"
  op: "Size"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/add"
  op: "Add"
  input: "ConvNet2_3/log_loss/range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/add"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range"
  op: "Range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range/start"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Size"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Fill"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/mod"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/DynamicStitch"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_1_grad/Tile"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Tile"
  op: "Tile"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Size"
  op: "Size"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/add"
  op: "Add"
  input: "ConvNet2_3/log_loss/num_present/range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/mod"
  op: "FloorMod"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/add"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range"
  op: "Range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range/start"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Size"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Fill"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/mod"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Maximum"
  op: "Maximum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/DynamicStitch"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/floordiv"
  op: "FloorDiv"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Shape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Select_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Tile"
  op: "Tile"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Tile"
  input: "ConvNet2_3/log_loss/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_3/log_loss/sub_2"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Tile"
  input: "ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_3/log_loss/num_present/Select"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/Rank"
  op: "Rank"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range"
  op: "Range"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range/start"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/Rank"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/num_present/broadcast_weights/ones_like_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/log_loss/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_2_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Neg"
  op: "Neg"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Neg"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Neg_grad/Neg"
  op: "Neg"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/log_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/log_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/log_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_3/log_loss/sub"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape"
  op: "Shape"
  input: "ConvNet2_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/log_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Neg_grad/Neg"
  input: "ConvNet2_3/log_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_3/Squeeze"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Neg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_1_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Neg"
  op: "Neg"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Neg"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/AddN"
  op: "AddN"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_3/log_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_3/log_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/Squeeze_grad/Shape"
  op: "Shape"
  input: "ConvNet2_2/output/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_3/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/AddN"
  input: "ConvNet2_3/gradients/ConvNet2_3/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "ConvNet2_2/output/Sigmoid"
  input: "ConvNet2_3/gradients/ConvNet2_3/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/Sigmoid_grad/SigmoidGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/Sigmoid_grad/SigmoidGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/output/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/BiasAddGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul"
  op: "MatMul"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/control_dependency"
  input: "ConvNet2/output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "ConvNet2_2/Dense1/Sigmoid"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "ConvNet2_2/Dense1/Sigmoid"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/Sigmoid_grad/SigmoidGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/Sigmoid_grad/SigmoidGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Dense1/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/BiasAddGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/control_dependency"
  input: "ConvNet2/Dense1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "ConvNet2_2/flatten/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "ConvNet2_2/Conv2/LeakyRelu/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape"
  op: "Shape"
  input: "ConvNet2_2/Conv2/LeakyRelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape_2"
  op: "Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/zeros"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape_2"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "ConvNet2_2/Conv2/LeakyRelu/mul"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Select"
  op: "Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/GreaterEqual"
  input: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Select_1"
  op: "Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/GreaterEqual"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/zeros"
  input: "ConvNet2_3/gradients/ConvNet2_2/flatten/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Select_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/control_dependency"
  input: "ConvNet2_2/Conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_2/Conv2/LeakyRelu/alpha"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/AddN_1"
  op: "AddN"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "ConvNet2_3/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/AddN_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/AddN_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/BiasAddGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "ConvNet2_2/Conv1/LeakyRelu/Maximum"
  input: "ConvNet2/Conv2/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/ShapeN"
  input: "ConvNet2/Conv2/kernel/read"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "ConvNet2_2/Conv1/LeakyRelu/Maximum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Const"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropInput"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropInput"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape"
  op: "Shape"
  input: "ConvNet2_2/Conv1/LeakyRelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape_2"
  op: "Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/zeros"
  op: "Fill"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape_2"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "ConvNet2_2/Conv1/LeakyRelu/mul"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Select"
  op: "Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/GreaterEqual"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Select_1"
  op: "Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/GreaterEqual"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/zeros"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Select"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Select_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape_1"
  op: "Shape"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Mul"
  op: "Mul"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/control_dependency"
  input: "ConvNet2_2/Conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Sum"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Mul"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Mul_1"
  op: "Mul"
  input: "ConvNet2_2/Conv1/LeakyRelu/alpha"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Sum_1"
  op: "Sum"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Mul_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Sum_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape_1"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape_1"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/AddN_2"
  op: "AddN"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/tuple/control_dependency_1"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "ConvNet2_3/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/AddN_2"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/AddN_2"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/LeakyRelu/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/BiasAddGrad"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "ConvNet2_2/Reshape"
  input: "ConvNet2/Conv1/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/ShapeN"
  input: "ConvNet2/Conv1/kernel/read"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "ConvNet2_2/Reshape"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Const"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "ConvNet2_3/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "ConvNet2_3/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2_3/beta1_power/Assign"
  op: "Assign"
  input: "ConvNet2_3/beta1_power"
  input: "ConvNet2_3/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/beta1_power/read"
  op: "Identity"
  input: "ConvNet2_3/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_3/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "ConvNet2_3/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2_3/beta2_power/Assign"
  op: "Assign"
  input: "ConvNet2_3/beta2_power"
  input: "ConvNet2_3/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/beta2_power/read"
  op: "Identity"
  input: "ConvNet2_3/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv1/bias/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Conv2/bias/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\016\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3584
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\016\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3584
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/Dense1/bias/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/kernel/Adam"
  input: "ConvNet2/ConvNet2/output/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/output/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/kernel/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/bias/Adam"
  input: "ConvNet2/ConvNet2/output/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/output/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1/Assign"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/ConvNet2/output/bias/Adam_1/read"
  op: "Identity"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Conv1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Conv1/kernel"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Conv1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Conv1/bias"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Conv2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Conv2/kernel"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Conv2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Conv2/bias"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Conv2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Dense1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Dense1/kernel"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/Dense1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/Dense1/bias"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/Dense1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/output/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/output/kernel"
  input: "ConvNet2/ConvNet2/output/kernel/Adam"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/update_ConvNet2/output/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "ConvNet2/output/bias"
  input: "ConvNet2/ConvNet2/output/bias/Adam"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/learning_rate"
  input: "ConvNet2_3/Adam/beta1"
  input: "ConvNet2_3/Adam/beta2"
  input: "ConvNet2_3/Adam/epsilon"
  input: "ConvNet2_3/gradients/ConvNet2_2/output/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ConvNet2_3/Adam/mul"
  op: "Mul"
  input: "ConvNet2_3/beta1_power/read"
  input: "ConvNet2_3/Adam/beta1"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/Assign"
  op: "Assign"
  input: "ConvNet2_3/beta1_power"
  input: "ConvNet2_3/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/Adam/mul_1"
  op: "Mul"
  input: "ConvNet2_3/beta2_power/read"
  input: "ConvNet2_3/Adam/beta2"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
}
node {
  name: "ConvNet2_3/Adam/Assign_1"
  op: "Assign"
  input: "ConvNet2_3/beta2_power"
  input: "ConvNet2_3/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2_3/Adam"
  op: "NoOp"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Conv2/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/Dense1/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/kernel/ApplyAdam"
  input: "^ConvNet2_3/Adam/update_ConvNet2/output/bias/ApplyAdam"
  input: "^ConvNet2_3/Adam/Assign"
  input: "^ConvNet2_3/Adam/Assign_1"
}
node {
  name: "v_Random"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "v_Greedy"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "v_OldAg"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "vs"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/v_Random/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/v_Random/Initializer/random_uniform/max"
  input: "ConvNet2/v_Random/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/v_Random/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/v_Random/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/v_Random/Initializer/random_uniform/mul"
  input: "ConvNet2/v_Random/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Random"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/v_Random/Assign"
  op: "Assign"
  input: "ConvNet2/v_Random"
  input: "ConvNet2/v_Random/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/v_Random/read"
  op: "Identity"
  input: "ConvNet2/v_Random"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/max"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/mul"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
}
node {
  name: "ConvNet2/v_Greedy"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/Assign"
  op: "Assign"
  input: "ConvNet2/v_Greedy"
  input: "ConvNet2/v_Greedy/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/v_Greedy/read"
  op: "Identity"
  input: "ConvNet2/v_Greedy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/max"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/mul"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
}
node {
  name: "ConvNet2/v_OldAg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/Assign"
  op: "Assign"
  input: "ConvNet2/v_OldAg"
  input: "ConvNet2/v_OldAg/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/v_OldAg/read"
  op: "Identity"
  input: "ConvNet2/v_OldAg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.7320507764816284
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvNet2/vs/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvNet2/vs/Initializer/random_uniform/max"
  input: "ConvNet2/vs/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvNet2/vs/Initializer/random_uniform/RandomUniform"
  input: "ConvNet2/vs/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
}
node {
  name: "ConvNet2/vs/Initializer/random_uniform"
  op: "Add"
  input: "ConvNet2/vs/Initializer/random_uniform/mul"
  input: "ConvNet2/vs/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
}
node {
  name: "ConvNet2/vs"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/vs/Assign"
  op: "Assign"
  input: "ConvNet2/vs"
  input: "ConvNet2/vs/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/vs/read"
  op: "Identity"
  input: "ConvNet2/vs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "ConvNet2_3/log_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v_Random_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "v_Random_1"
      }
    }
  }
}
node {
  name: "v_Random_1"
  op: "ScalarSummary"
  input: "v_Random_1/tags"
  input: "v_Random"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v_Greedy_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "v_Greedy_1"
      }
    }
  }
}
node {
  name: "v_Greedy_1"
  op: "ScalarSummary"
  input: "v_Greedy_1/tags"
  input: "v_Greedy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v_OldAg_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "v_OldAg_1"
      }
    }
  }
}
node {
  name: "v_OldAg_1"
  op: "ScalarSummary"
  input: "v_OldAg_1/tags"
  input: "v_OldAg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "vs_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "vs_1"
      }
    }
  }
}
node {
  name: "vs_1"
  op: "ScalarSummary"
  input: "vs_1/tags"
  input: "vs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  input: "v_Random_1"
  input: "v_Greedy_1"
  input: "v_OldAg_1"
  input: "vs_1"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^ConvNet2/Conv1/kernel/Assign"
  input: "^ConvNet2/Conv1/bias/Assign"
  input: "^ConvNet2/Conv2/kernel/Assign"
  input: "^ConvNet2/Conv2/bias/Assign"
  input: "^ConvNet2/Dense1/kernel/Assign"
  input: "^ConvNet2/Dense1/bias/Assign"
  input: "^ConvNet2/output/kernel/Assign"
  input: "^ConvNet2/output/bias/Assign"
  input: "^ConvNet2_3/beta1_power/Assign"
  input: "^ConvNet2_3/beta2_power/Assign"
  input: "^ConvNet2/ConvNet2/Conv1/kernel/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Conv1/kernel/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/Conv1/bias/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Conv1/bias/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/Conv2/kernel/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Conv2/kernel/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/Conv2/bias/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Conv2/bias/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/Dense1/kernel/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Dense1/kernel/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/Dense1/bias/Adam/Assign"
  input: "^ConvNet2/ConvNet2/Dense1/bias/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/output/kernel/Adam/Assign"
  input: "^ConvNet2/ConvNet2/output/kernel/Adam_1/Assign"
  input: "^ConvNet2/ConvNet2/output/bias/Adam/Assign"
  input: "^ConvNet2/ConvNet2/output/bias/Adam_1/Assign"
  input: "^ConvNet2/v_Random/Assign"
  input: "^ConvNet2/v_Greedy/Assign"
  input: "^ConvNet2/v_OldAg/Assign"
  input: "^ConvNet2/vs/Assign"
}
node {
  name: "ConvNet2/global_step/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ConvNet2/global_step/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ConvNet2/global_step/Initializer/zeros"
  op: "Fill"
  input: "ConvNet2/global_step/Initializer/zeros/shape_as_tensor"
  input: "ConvNet2/global_step/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConvNet2/global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvNet2/global_step/Assign"
  op: "Assign"
  input: "ConvNet2/global_step"
  input: "ConvNet2/global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvNet2/global_step/read"
  op: "Identity"
  input: "ConvNet2/global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
}
node {
  name: "ConvNet2_5/Assign/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ConvNet2_5/Assign"
  op: "Assign"
  input: "ConvNet2/global_step"
  input: "ConvNet2_5/Assign/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 31
          }
        }
        string_val: "ConvNet2/Conv1/bias"
        string_val: "ConvNet2/Conv1/kernel"
        string_val: "ConvNet2/Conv2/bias"
        string_val: "ConvNet2/Conv2/kernel"
        string_val: "ConvNet2/ConvNet2/Conv1/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv2/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/Dense1/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/output/bias/Adam"
        string_val: "ConvNet2/ConvNet2/output/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/output/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/output/kernel/Adam_1"
        string_val: "ConvNet2/Dense1/bias"
        string_val: "ConvNet2/Dense1/kernel"
        string_val: "ConvNet2/global_step"
        string_val: "ConvNet2/output/bias"
        string_val: "ConvNet2/output/kernel"
        string_val: "ConvNet2/v_Greedy"
        string_val: "ConvNet2/v_OldAg"
        string_val: "ConvNet2/v_Random"
        string_val: "ConvNet2/vs"
        string_val: "ConvNet2_3/beta1_power"
        string_val: "ConvNet2_3/beta2_power"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 31
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "ConvNet2/Conv1/bias"
  input: "ConvNet2/Conv1/kernel"
  input: "ConvNet2/Conv2/bias"
  input: "ConvNet2/Conv2/kernel"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  input: "ConvNet2/ConvNet2/output/bias/Adam"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1"
  input: "ConvNet2/ConvNet2/output/kernel/Adam"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  input: "ConvNet2/Dense1/bias"
  input: "ConvNet2/Dense1/kernel"
  input: "ConvNet2/global_step"
  input: "ConvNet2/output/bias"
  input: "ConvNet2/output/kernel"
  input: "ConvNet2/v_Greedy"
  input: "ConvNet2/v_OldAg"
  input: "ConvNet2/v_Random"
  input: "ConvNet2/vs"
  input: "ConvNet2_3/beta1_power"
  input: "ConvNet2_3/beta2_power"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 31
          }
        }
        string_val: "ConvNet2/Conv1/bias"
        string_val: "ConvNet2/Conv1/kernel"
        string_val: "ConvNet2/Conv2/bias"
        string_val: "ConvNet2/Conv2/kernel"
        string_val: "ConvNet2/ConvNet2/Conv1/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv2/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/Dense1/bias/Adam"
        string_val: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
        string_val: "ConvNet2/ConvNet2/output/bias/Adam"
        string_val: "ConvNet2/ConvNet2/output/bias/Adam_1"
        string_val: "ConvNet2/ConvNet2/output/kernel/Adam"
        string_val: "ConvNet2/ConvNet2/output/kernel/Adam_1"
        string_val: "ConvNet2/Dense1/bias"
        string_val: "ConvNet2/Dense1/kernel"
        string_val: "ConvNet2/global_step"
        string_val: "ConvNet2/output/bias"
        string_val: "ConvNet2/output/kernel"
        string_val: "ConvNet2/v_Greedy"
        string_val: "ConvNet2/v_OldAg"
        string_val: "ConvNet2/v_Random"
        string_val: "ConvNet2/vs"
        string_val: "ConvNet2_3/beta1_power"
        string_val: "ConvNet2_3/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 31
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "ConvNet2/Conv1/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "ConvNet2/Conv1/kernel"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "ConvNet2/Conv2/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "ConvNet2/Conv2/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/bias/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv1/kernel/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/bias/Adam_1"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Conv2/kernel/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/bias/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "ConvNet2/ConvNet2/Dense1/kernel/Adam_1"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/bias/Adam"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/bias/Adam_1"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "ConvNet2/ConvNet2/output/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "ConvNet2/Dense1/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "ConvNet2/Dense1/kernel"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Dense1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "ConvNet2/global_step"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "ConvNet2/output/bias"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "ConvNet2/output/kernel"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "ConvNet2/v_Greedy"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Greedy"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "ConvNet2/v_OldAg"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_OldAg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "ConvNet2/v_Random"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/v_Random"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "ConvNet2/vs"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/vs"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "ConvNet2_3/beta1_power"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "ConvNet2_3/beta2_power"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvNet2/Conv1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
}
versions {
  producer: 26
}
